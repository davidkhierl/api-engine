/* eslint-disable */
export default async () => {
    const t = {
        ["./user/entities/user.entity"]: await import("./user/entities/user.entity"),
        ["./auth/dto/auth.response.dto"]: await import("./auth/dto/auth.response.dto"),
        ["./auth/dto/auth-refresh-response.dto"]: await import("./auth/dto/auth-refresh-response.dto"),
        ["./key/entities/key.entity"]: await import("./key/entities/key.entity"),
        ["./keychain/entities/keychain.entity"]: await import("./keychain/entities/keychain.entity"),
        ["./encryption/entities/encryption.entity"]: await import("./encryption/entities/encryption.entity")
    };
    return { "@nestjs/swagger": { "models": [[import("./user/entities/user.entity"), { "UserEntity": { id: { required: true, type: () => String, description: "User id", example: "75b49489-e8f7-4a27-840a-b88a1b77e2df" }, email: { required: true, type: () => String, description: "User email", example: "johndoe@email.com" }, displayName: { required: true, type: () => String, nullable: true, description: "User display name", example: "John doe" }, avatarUrl: { required: true, type: () => String, nullable: true, description: "User avatar", example: "http://localhost:3000/images/avatar-default-1.png" }, role: { required: true, type: () => Object, description: "User role" }, created_at: { required: true, type: () => Date, description: "User created date" }, updated_at: { required: true, type: () => Date, description: "User updated date" } } }], [import("./auth/dto/auth-login.dto"), { "AuthLoginDto": { email: { required: true, type: () => String, description: "Login email", example: "johndoe@email.com" }, password: { required: true, type: () => String, description: "Login password", example: "#MyStrongPassword1" } } }], [import("./auth/dto/auth.response.dto"), { "AuthResponseDto": { user: { required: true, type: () => t["./user/entities/user.entity"].UserEntity, description: "User data" }, access_token: { required: true, type: () => String, description: "Access token" }, at_expiry: { required: true, type: () => Number, description: "Access token expiration" } } }], [import("./auth/dto/auth-refresh-response.dto"), { "AuthRefreshResponseDto": {} }], [import("./common/dto/pagination-options.dto"), { "PaginationOptions": { skip: { required: false, type: () => Number, description: "Record to skip" }, take: { required: false, type: () => Number, description: "Record to take" } } }], [import("./key/dto/create-key.dto"), { "CreateKeyDto": { api_key: { required: true, type: () => String, description: "API Key", example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c" }, name: { required: false, type: () => String, description: "Key name", example: "My key" }, description: { required: false, type: () => String, description: "Key description", example: "My project api key" }, request_count: { required: false, type: () => Number, description: "API key current request count", default: 0 }, request_limit: { required: false, type: () => Number, description: "API key request limit", example: 500, default: 0 }, enabled: { required: false, type: () => Boolean, description: "Key status", default: true }, keychain_id: { required: true, type: () => String, description: "Keychain id", example: "e0ba4448-d6f3-4e83-8e2b-2760a8be3546" }, long: { required: true, type: () => String, description: "Encryption key partial", example: "0NiCFheZf28B0DE04zRLjHpPbVWEVz0e6Z", minLength: 34 } } }], [import("./key/dto/update-key.dto"), { "UpdateKeyDto": {} }], [import("./key/entities/key.entity"), { "KeyEntity": { id: { required: true, type: () => String, description: "Key id", example: "9131a8b6-5a54-43ce-898b-98cff6ff7ccf" }, api_key: { required: true, type: () => String, description: "Encrypted API Key", example: "v1.aesgcm256.7e5c6df8.PSWgDYVu6IIhNou3.RcrLyyb73-IRoNoa287hqooyjwoaCgipc39_VFpl0Q==" }, name: { required: true, type: () => String, nullable: true, description: "Key name", example: "My key" }, description: { required: true, type: () => String, nullable: true, description: "Key description", example: "My project api key" }, request_count: { required: true, type: () => Number, description: "API key current request count", default: 0 }, request_limit: { required: true, type: () => Number, description: "API key request limit", example: 500, default: 0 }, enabled: { required: true, type: () => Boolean, description: "Key status", default: true }, created_at: { required: true, type: () => Date, description: "Key created date" }, updated_at: { required: true, type: () => Date, description: "Key updated date" }, keychain_id: { required: true, type: () => String, description: "Keychain id", example: "8ad8e1ce-04c2-4b36-9858-da27477ed83d" } } }], [import("./keychain/entities/keychain.entity"), { "KeychainEntity": { id: { required: true, type: () => String, description: "Keychain ID", example: "97146ddb-de2f-4283-9470-0a56e723f521" }, name: { required: true, type: () => String, description: "Keychain name", example: "My keychain" }, description: { required: true, type: () => String, nullable: true, description: "Keychain description", example: "My project keychain" }, created_at: { required: true, type: () => Date, description: "Keychain created date" }, updated_at: { required: true, type: () => Date, description: "Keychain updated date" }, user_id: { required: true, type: () => String, description: "User id", example: "46a3d687-9380-4cc6-8fec-b67c0895b351" } } }], [import("./keychain/dto/create-keychain.dto"), { "CreateKeychainDto": { name: { required: true, type: () => String, description: "Keychain name", example: "My keychain" }, description: { required: false, type: () => String, description: "Keychain description", example: "My project keychain" } } }], [import("./keychain/dto/update-keychain.dto"), { "UpdateKeychainDto": {} }], [import("./user/dto/create-user.dto"), { "CreateUserDto": { displayName: { required: false, type: () => String, description: "User display name", example: "John Doe" }, email: { required: true, type: () => String, description: "User email", example: "johndoe@email.com" }, password: { required: true, type: () => String, description: "User password", example: "#MyStrongPassword1" } } }], [import("./user/dto/update-user.dto"), { "UpdateUserDto": {} }], [import("./encryption/entities/encryption.entity"), { "EncryptionEntity": { id: { required: true, type: () => String, description: "Encryption id", example: "659982c6-537f-47a8-bd49-099054a0935c" }, long: { required: false, type: () => String, nullable: true, description: "Encryption key", example: "PsPXgDd8rxndj1r1Kbkqf5Jh0vtCFbRCaj" }, created_at: { required: true, type: () => Date }, updated_at: { required: true, type: () => Date } } }], [import("./encryption/dto/create-encryption-response.dto"), { "CreateEncryptionResponseDto": { id: { required: true, type: () => String }, long: { required: true, type: () => String }, created_at: { required: true, type: () => Date }, updated_at: { required: true, type: () => Date }, user_id: { required: true, type: () => String } } }]], "controllers": [[import("./app.controller"), { "AppController": { "getHello": { type: String } } }], [import("./auth/auth.controller"), { "AuthController": { "login": { description: "Login user", type: t["./auth/dto/auth.response.dto"].AuthResponseDto }, "logout": { description: "Logout user, deletes session" }, "refreshToken": { description: "Get new access token", type: t["./auth/dto/auth-refresh-response.dto"].AuthRefreshResponseDto } } }], [import("./key/key.controller"), { "KeyController": { "create": { description: "Create key", type: t["./key/entities/key.entity"].KeyEntity }, "findAll": { description: "Get all keys", type: [t["./key/entities/key.entity"].KeyEntity] }, "findOne": { description: "Get key", type: t["./key/entities/key.entity"].KeyEntity }, "update": { description: "Update key", type: t["./key/entities/key.entity"].KeyEntity }, "remove": { description: "Delete key", type: t["./key/entities/key.entity"].KeyEntity } } }], [import("./keychain/keychain.controller"), { "KeychainController": { "create": { description: "Create keychain", type: t["./keychain/entities/keychain.entity"].KeychainEntity }, "findAll": { description: "Get all keychains", type: [t["./keychain/entities/keychain.entity"].KeychainEntity] }, "findOne": { description: "Get keychain", type: t["./keychain/entities/keychain.entity"].KeychainEntity }, "findKeychainKeys": { description: "Get keychain keys", type: [t["./key/entities/key.entity"].KeyEntity] }, "update": { description: "Update keychain", type: t["./keychain/entities/keychain.entity"].KeychainEntity }, "remove": { description: "Delete keychain", type: t["./keychain/entities/keychain.entity"].KeychainEntity } } }], [import("./user/user.controller"), { "UserController": { "create": { description: "Create user", type: t["./auth/dto/auth.response.dto"].AuthResponseDto }, "current": { description: "Get current user", type: t["./user/entities/user.entity"].UserEntity }, "updateCurrent": { description: "Update current user", type: t["./user/entities/user.entity"].UserEntity }, "removeCurrent": { description: "Delete current user", type: t["./user/entities/user.entity"].UserEntity }, "findAll": { description: "Get all users", type: [t["./user/entities/user.entity"].UserEntity] }, "findOne": { description: "Get user", type: t["./user/entities/user.entity"].UserEntity }, "update": { description: "Update user", type: t["./user/entities/user.entity"].UserEntity }, "remove": { description: "Delete user", type: t["./user/entities/user.entity"].UserEntity } } }], [import("./encryption/encryption.controller"), { "EncryptionController": { "create": { type: t["./encryption/entities/encryption.entity"].EncryptionEntity }, "findOne": { type: t["./encryption/entities/encryption.entity"].EncryptionEntity }, "remove": { type: t["./encryption/entities/encryption.entity"].EncryptionEntity } } }]] } };
};