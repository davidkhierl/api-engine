// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  displayName    String?
  avatarUrl      String?
  password_hash  String
  role           UserRole       @default(USER)
  keychains      Keychain[]
  encryption     Encryption?
  session_tokens SessionToken[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("users")
}

model Session {
  sid           String        @id @db.VarChar()
  sess          Json          @db.Json
  expire        DateTime      @db.Timestamp(6)
  session_token SessionToken?

  @@index([expire], map: "IDX_session_expire")
  @@map("sessions")
}

enum TokenType {
  REFRESH_TOKEN
}

enum SessionTokenStatus {
  ACTIVE
  EXPIRED
  INVALIDATED_BY_USER
  LOGOUT
  REFRESHED
}

model SessionToken {
  id             String             @id @default(uuid())
  token          String
  status         SessionTokenStatus @default(ACTIVE)
  ip             String?
  location       String?
  used_at        DateTime?
  invalidated_at DateTime?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt

  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  session    Session? @relation(fields: [session_id], references: [sid])
  session_id String?  @unique @db.VarChar()

  @@map("session_tokens")
}

model Keychain {
  id          String   @id @default(uuid())
  name        String
  description String?
  keys        Key[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("keychains")
}

model Key {
  id            String   @id @default(uuid())
  api_key       String   @unique
  name          String?
  description   String?
  request_count Int      @default(0)
  request_limit Int      @default(0)
  enabled       Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  keychain    Keychain @relation(fields: [keychain_id], references: [id], onDelete: Cascade)
  keychain_id String

  @@map("keys")
}

model Encryption {
  id         String   @id @default(uuid())
  short      String
  test       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique

  @@map("encryptions")
}
